
/**

    T2 shell, para teste do T2FS - Sistema de arquivos do trabalho 2 de Sistemas Operacionais I

*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../include/t2fs.h"


void cmdMan(void);

void cmdFormat(void);

void cmdWho(void);
void cmdLs(void);
void cmdMkdir(void);
void cmdRmdir(void);

void cmdOpen(void);
void cmdRead(void);
void cmdClose(void);

void cmdWrite(void);
void cmdCreate(void);
void cmdDelete(void);

void cmdCp(void);
void cmdFscp(void);

void cmdGetCW(void);
void cmdChangeCW(void);


void cmdExit(void);

static void dump(char *buffer, int size) {
    int base, i;
    char c;
    for (base=0; base<size; base+=16) {
        printf ("%04d ", base);
        for (i=0; i<16; ++i) {
            if (base+i<size) printf ("%02X ", buffer[base+i]);
            else printf ("   ");
        }

        printf (" *");

        for (i=0; i<16; ++i) {
            if (base+i<size) c = buffer[base+i];
            else c = ' ';

            if (c<' ' || c>'z' ) c = ' ';
            printf ("%c", c );
        }
        printf ("*\n");
    }
}



char helpExit[]  = "             -> finish this shell";
char helpMan[]   = "[comando]    -> command help";
char helpWho[]   = "             -> shows T2FS authors";
char helpLs[]    = "[pahname]    -> list files in [pathname]";
char helpMkdir[] = "[dirname]    -> create [dirname] in T2FS";
char helpRmdir[] = "[dirname]    -> deletes [dirname] from T2FS";
char helpOpen[]  = "[file]       -> open [file] from T2FS";
char helpRead[]  = "[hdl] [siz]  -> read [siz] bytes from file [hdl]";
char helpClose[] = "[hdl         -> close [hdl]";
char helpWrite[] = "[hdl] [str]  -> write [str] bytes to file [hdl]";
char helpCreate[]= "[file]       -> create new [file] in T2FS";
char helpDelete[]= "[file]       -> deletes [file] from T2FS";
char helpSeek[]  = "[hdl] [pos]  -> set CP of [hdl] file on [pos]";
char helpTrunc[] = "[hdl] [siz]  -> truncate file [hdl] to [siz] bytes";
char helpLn[]     = "[lnk] [file] -> create link [lnk] to [file]";
char helpFormat[] = "[bs]         -> format virtual disk";

char helpCopy[]    = "[src] [dst]  -> copy files: [src] -> [dst]";
char helpFscp[]	  =	"[src] [dst]  -> copy files: [src] -> [dst]"
					"\n    fscp -t [src] [dst]  -> copy HostFS to T2FS"
					"\n    fscp -f [src] [dst]  -> copy T2FS   to HostFS";

char helpChangeCW[] = "[pathname]   -> change to [pathname]";
char helpGetCW[] = "             -> shows Current Path";


struct {
	char name[20];
	char *helpString;
	void (*f)(void);
} cmdList[] = {
	{ "exit", helpExit, cmdExit }, { "x", helpExit, cmdExit },
	{ "man", helpMan, cmdMan },
	{ "who", helpWho, cmdWho }, { "id", helpWho, cmdWho },
	{ "dir", helpLs, cmdLs }, { "ls", helpLs, cmdLs },

	{ "open", helpOpen, cmdOpen },
	{ "read", helpRead, cmdRead }, { "rd", helpRead, cmdRead },
	{ "close", helpClose, cmdClose }, { "cl", helpClose, cmdClose },
	{ "write", helpWrite, cmdWrite }, { "wr", helpWrite, cmdWrite },
	{ "create", helpCreate, cmdCreate }, { "cr", helpCreate, cmdCreate },
	{ "delete", helpDelete, cmdDelete }, { "del", helpDelete, cmdDelete },

	{ "format", helpFormat, cmdFormat },

	{ "cp", helpCopy, cmdCp },
	{ "fscp", helpFscp, cmdFscp },
	{ "fim", helpExit, NULL }
};



void tst_identify() {
    char name[256];
	int err;

	printf ("Teste do identify()\n");

    err = identify2(name, 256);
    if (err) {
        printf ("Erro: %d\n", err);
        return;
    }

	printf ("Ok!\n\n");
}

void tst_open(char *src) {
    FILE2 hSrc;

	printf ("Teste do open() e close()\n");

	hSrc = open2 (src);

    if (hSrc<0) {
        printf ("Erro: Open %s (handle=%d)\n", src, hSrc);
        return;
    }

	if (close2(hSrc)) {
        printf ("Erro: Close (handle=%d)\n", hSrc);
        return;
	}

	printf ("Ok!\n\n");
}

void tst_read(char *src) {
	char buffer[256];
    FILE2 hSrc;

	printf ("Teste do read()\n");

    hSrc = open2 (src);
    if (hSrc<0) {
        printf ("Erro: Open %s (handle=%d)\n", src, hSrc);
        return;
    }

    int err = read2(hSrc, buffer, 256);
    if (err<0) {
        printf ("Error: Read %s (handle=%d), err=%d\n", src, hSrc, err);
		close2(hSrc);
        return;
    }
    if (err==0) {
        printf ("Error: Arquivo vazio %s (handle=%d)\n", src, hSrc);
		close2(hSrc);
        return;
    }

    dump(buffer, err);

	if (close2(hSrc)) {
        printf ("Erro: Close (handle=%d)\n", hSrc);
        return;
	}
	printf ("Ok!\n\n");
}

void tst_list_dir(char *src) {
    int d;
	int n;

	printf ("Teste do opendir(), readdir() e closedir()\n");

    // Abre o diret